// Targeted by JavaCPP version 1.5.7-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.treesitter;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.treesitter.global.treesitter.*;


@Properties(inherit = org.bytedeco.treesitter.presets.treesitter.class)
public class TSInput extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public TSInput() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public TSInput(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public TSInput(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public TSInput position(long position) {
        return (TSInput)super.position(position);
    }
    @Override public TSInput getPointer(long i) {
        return new TSInput((Pointer)this).offsetAddress(i);
    }

  public native Pointer payload(); public native TSInput payload(Pointer setter);
  public static class Read_Pointer_int_TSPoint_IntPointer extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Read_Pointer_int_TSPoint_IntPointer(Pointer p) { super(p); }
      protected Read_Pointer_int_TSPoint_IntPointer() { allocate(); }
      private native void allocate();
      public native @Cast("const char*") BytePointer call(Pointer payload, @Cast("uint32_t") int byte_index, @ByVal TSPoint _position, @Cast("uint32_t*") IntPointer bytes_read);
  }
  public native Read_Pointer_int_TSPoint_IntPointer read(); public native TSInput read(Read_Pointer_int_TSPoint_IntPointer setter);
  public native @Cast("TSInputEncoding") int encoding(); public native TSInput encoding(int setter);
}
