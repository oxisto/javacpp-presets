// Targeted by JavaCPP version 1.5.7-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.treesitter;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.treesitter.global.treesitter.*;


@Properties(inherit = org.bytedeco.treesitter.presets.treesitter.class)
public class TSLanguage extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public TSLanguage() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public TSLanguage(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public TSLanguage(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public TSLanguage position(long position) {
        return (TSLanguage)super.position(position);
    }
    @Override public TSLanguage getPointer(long i) {
        return new TSLanguage((Pointer)this).offsetAddress(i);
    }

  public native @Cast("uint32_t") int version(); public native TSLanguage version(int setter);
  public native @Cast("uint32_t") int symbol_count(); public native TSLanguage symbol_count(int setter);
  public native @Cast("uint32_t") int alias_count(); public native TSLanguage alias_count(int setter);
  public native @Cast("uint32_t") int token_count(); public native TSLanguage token_count(int setter);
  public native @Cast("uint32_t") int external_token_count(); public native TSLanguage external_token_count(int setter);
  public native @Cast("uint32_t") int state_count(); public native TSLanguage state_count(int setter);
  public native @Cast("uint32_t") int large_state_count(); public native TSLanguage large_state_count(int setter);
  public native @Cast("uint32_t") int production_id_count(); public native TSLanguage production_id_count(int setter);
  public native @Cast("uint32_t") int field_count(); public native TSLanguage field_count(int setter);
  public native @Cast("uint16_t") short max_alias_sequence_length(); public native TSLanguage max_alias_sequence_length(short setter);
  public native @Cast("const uint16_t*") ShortPointer parse_table(); public native TSLanguage parse_table(ShortPointer setter);
  public native @Cast("const uint16_t*") ShortPointer small_parse_table(); public native TSLanguage small_parse_table(ShortPointer setter);
  public native @Cast("const uint32_t*") IntPointer small_parse_table_map(); public native TSLanguage small_parse_table_map(IntPointer setter);
  public native @Const TSParseActionEntry parse_actions(); public native TSLanguage parse_actions(TSParseActionEntry setter);
  @MemberGetter public native @Cast("const char*") BytePointer symbol_names(int i);
  @MemberGetter public native @Cast("const char*const*") PointerPointer symbol_names();
  @MemberGetter public native @Cast("const char*") BytePointer field_names(int i);
  @MemberGetter public native @Cast("const char*const*") PointerPointer field_names();
  public native @Const TSFieldMapSlice field_map_slices(); public native TSLanguage field_map_slices(TSFieldMapSlice setter);
  public native @Const TSFieldMapEntry field_map_entries(); public native TSLanguage field_map_entries(TSFieldMapEntry setter);
  public native @Const TSSymbolMetadata symbol_metadata(); public native TSLanguage symbol_metadata(TSSymbolMetadata setter);
  public native @Cast("const uint16_t*") ShortPointer public_symbol_map(); public native TSLanguage public_symbol_map(ShortPointer setter);
  public native @Cast("const uint16_t*") ShortPointer alias_map(); public native TSLanguage alias_map(ShortPointer setter);
  public native @Cast("const uint16_t*") ShortPointer alias_sequences(); public native TSLanguage alias_sequences(ShortPointer setter);
  public native @Const TSLexMode lex_modes(); public native TSLanguage lex_modes(TSLexMode setter);
  public static class Lex_fn_TSLexer_short extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Lex_fn_TSLexer_short(Pointer p) { super(p); }
      protected Lex_fn_TSLexer_short() { allocate(); }
      private native void allocate();
      public native @Cast("bool") boolean call(TSLexer arg0, @Cast("TSStateId") short arg1);
  }
  public native Lex_fn_TSLexer_short lex_fn(); public native TSLanguage lex_fn(Lex_fn_TSLexer_short setter);
  public static class Keyword_lex_fn_TSLexer_short extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Keyword_lex_fn_TSLexer_short(Pointer p) { super(p); }
      protected Keyword_lex_fn_TSLexer_short() { allocate(); }
      private native void allocate();
      public native @Cast("bool") boolean call(TSLexer arg0, @Cast("TSStateId") short arg1);
  }
  public native Keyword_lex_fn_TSLexer_short keyword_lex_fn(); public native TSLanguage keyword_lex_fn(Keyword_lex_fn_TSLexer_short setter);
  public native @Cast("uint16_t") short keyword_capture_token(); public native TSLanguage keyword_capture_token(short setter);
    @Name("external_scanner.states") public native @Cast("const bool*") BoolPointer external_scanner_states(); public native TSLanguage external_scanner_states(BoolPointer setter);
    @Name("external_scanner.symbol_map") public native @Cast("const uint16_t*") ShortPointer external_scanner_symbol_map(); public native TSLanguage external_scanner_symbol_map(ShortPointer setter);
    public static class Pointer_Create extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    Pointer_Create(Pointer p) { super(p); }
        protected Pointer_Create() { allocate(); }
        private native void allocate();
        public native Pointer call();
    }
    @Name("external_scanner.create") public native Pointer_Create external_scanner_create(); public native TSLanguage external_scanner_create(Pointer_Create setter);
    public static class Destroy_Pointer extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    Destroy_Pointer(Pointer p) { super(p); }
        protected Destroy_Pointer() { allocate(); }
        private native void allocate();
        public native void call(Pointer arg0);
    }
    @Name("external_scanner.destroy") public native Destroy_Pointer external_scanner_destroy(); public native TSLanguage external_scanner_destroy(Destroy_Pointer setter);
    public static class Scan_Pointer_TSLexer_BoolPointer extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    Scan_Pointer_TSLexer_BoolPointer(Pointer p) { super(p); }
        protected Scan_Pointer_TSLexer_BoolPointer() { allocate(); }
        private native void allocate();
        public native @Cast("bool") boolean call(Pointer arg0, TSLexer arg1, @Cast("const bool*") BoolPointer symbol_whitelist);
    }
    @Name("external_scanner.scan") public native Scan_Pointer_TSLexer_BoolPointer external_scanner_scan(); public native TSLanguage external_scanner_scan(Scan_Pointer_TSLexer_BoolPointer setter);
    public static class Serialize_Pointer_BytePointer extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    Serialize_Pointer_BytePointer(Pointer p) { super(p); }
        protected Serialize_Pointer_BytePointer() { allocate(); }
        private native void allocate();
        public native @Cast("unsigned") int call(Pointer arg0, @Cast("char*") BytePointer arg1);
    }
    @Name("external_scanner.serialize") public native Serialize_Pointer_BytePointer external_scanner_serialize(); public native TSLanguage external_scanner_serialize(Serialize_Pointer_BytePointer setter);
    public static class Deserialize_Pointer_BytePointer_int extends FunctionPointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public    Deserialize_Pointer_BytePointer_int(Pointer p) { super(p); }
        protected Deserialize_Pointer_BytePointer_int() { allocate(); }
        private native void allocate();
        public native void call(Pointer arg0, @Cast("const char*") BytePointer arg1, @Cast("unsigned") int arg2);
    }
    @Name("external_scanner.deserialize") public native Deserialize_Pointer_BytePointer_int external_scanner_deserialize(); public native TSLanguage external_scanner_deserialize(Deserialize_Pointer_BytePointer_int setter);
}
