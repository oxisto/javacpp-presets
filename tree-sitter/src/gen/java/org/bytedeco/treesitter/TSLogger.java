// Targeted by JavaCPP version 1.5.7-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.treesitter;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.treesitter.global.treesitter.*;


@Properties(inherit = org.bytedeco.treesitter.presets.treesitter.class)
public class TSLogger extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public TSLogger() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public TSLogger(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public TSLogger(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public TSLogger position(long position) {
        return (TSLogger)super.position(position);
    }
    @Override public TSLogger getPointer(long i) {
        return new TSLogger((Pointer)this).offsetAddress(i);
    }

  public native Pointer payload(); public native TSLogger payload(Pointer setter);
  public static class Log_Pointer_int_BytePointer extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Log_Pointer_int_BytePointer(Pointer p) { super(p); }
      protected Log_Pointer_int_BytePointer() { allocate(); }
      private native void allocate();
      public native void call(Pointer payload, @Cast("TSLogType") int arg1, @Cast("const char*") BytePointer arg2);
  }
  public native Log_Pointer_int_BytePointer log(); public native TSLogger log(Log_Pointer_int_BytePointer setter);
}
