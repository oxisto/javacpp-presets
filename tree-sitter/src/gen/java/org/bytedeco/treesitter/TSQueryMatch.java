// Targeted by JavaCPP version 1.5.7-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.treesitter;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.treesitter.global.treesitter.*;


@Properties(inherit = org.bytedeco.treesitter.presets.treesitter.class)
public class TSQueryMatch extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public TSQueryMatch() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public TSQueryMatch(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public TSQueryMatch(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public TSQueryMatch position(long position) {
        return (TSQueryMatch)super.position(position);
    }
    @Override public TSQueryMatch getPointer(long i) {
        return new TSQueryMatch((Pointer)this).offsetAddress(i);
    }

  public native @Cast("uint32_t") int id(); public native TSQueryMatch id(int setter);
  public native @Cast("uint16_t") short pattern_index(); public native TSQueryMatch pattern_index(short setter);
  public native @Cast("uint16_t") short capture_count(); public native TSQueryMatch capture_count(short setter);
  public native @Const TSQueryCapture captures(); public native TSQueryMatch captures(TSQueryCapture setter);
}
